var N=null,E="",T="t",U="u",searchIndex={};
var R=["instant","Wraps a future, setting an upper bound to the amount of…","duration","result","to_string","string","try_from","try_into","borrow","borrow_mut","type_id","formatter","description","Returns `true` if the error was caused by the inner value…","Returns `true` if the error was caused by the timer being…","TimerProvider","TimeoutError"];

searchIndex["async_timer"]={"doc":"A crate that wraps some functionality from [tokio-timer]…","i":[[3,R[16],"async_timer","Error returned by `Timeout`.",N,N],[3,"Error",E,"Errors encountered by the timer implementation.",N,N],[3,R[15],E,"Provider of all timer functionality",N,N],[11,"new",E,"Creates a `TimerProvider`, spawning a background thread to…",0,[[],["self"]]],[11,"delay",E,"Creates a future that completes at the specified instant…",0,[[["self"],[R[0]]]]],[11,"delay_from_now",E,"Creates a future that completes after `duration` amount of…",0,[[["self"],[R[2]]]]],[11,"timeout_future",E,R[1],0,[[["self"],[R[0]],["fut"]]]],[11,"timeout_future_from_now",E,R[1],0,[[["self"],[R[2]],["fut"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[4],E,E,1,[[["self"]],[R[5]]]],[11,"into",E,E,1,[[],[U]]],[11,R[6],E,E,1,[[[U]],[R[3]]]],[11,R[7],E,E,1,[[],[R[3]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],["typeid"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[4],E,E,2,[[["self"]],[R[5]]]],[11,"into",E,E,2,[[],[U]]],[11,R[6],E,E,2,[[[U]],[R[3]]]],[11,R[7],E,E,2,[[],[R[3]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],["typeid"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"to_owned",E,E,0,[[["self"]],[T]]],[11,"clone_into",E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[6],E,E,0,[[[U]],[R[3]]]],[11,R[7],E,E,0,[[],[R[3]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],["typeid"]]],[11,"fmt",E,E,2,[[["self"],[R[11]]],[["error"],[R[3],["error"]]]]],[11,"fmt",E,E,1,[[["self"],[R[11]]],[["error"],[R[3],["error"]]]]],[11,"fmt",E,E,2,[[["self"],[R[11]]],[["error"],[R[3],["error"]]]]],[11,"fmt",E,E,1,[[["self"],[R[11]]],[["error"],[R[3],["error"]]]]],[11,R[12],E,E,1,[[["self"]],["str"]]],[11,R[12],E,E,2,[[["self"]],["str"]]],[11,"clone",E,E,0,[[["self"]],["timerprovider"]]],[11,"default",E,E,0,[[],["self"]]],[11,"fmt",E,E,0,[[["self"],[R[11]]],[R[3]]]],[11,"inner",E,"Create a new `Error` representing the inner value…",1,[[[T]],["error"]]],[11,"is_inner",E,R[13],1,[[["self"]],["bool"]]],[11,"into_inner",E,"Consumes `self`, returning the inner future error.",1,[[],["option"]]],[11,"elapsed",E,"Create a new `Error` representing the inner value not…",1,[[],["error"]]],[11,"is_elapsed",E,R[13],1,[[["self"]],["bool"]]],[11,"timer",E,"Creates a new `Error` representing an error encountered by…",1,[[["error"]],["error"]]],[11,"is_timer",E,"Returns `true` if the error was caused by the timer.",1,[[["self"]],["bool"]]],[11,"into_timer",E,"Consumes `self`, returning the error raised by the timer…",1,[[],[["option",["error"]],["error"]]]],[11,"shutdown",E,"Create an error representing a shutdown timer.",2,[[],["error"]]],[11,"is_shutdown",E,R[14],2,[[["self"]],["bool"]]],[11,"at_capacity",E,"Create an error representing a timer at capacity.",2,[[],["error"]]],[11,"is_at_capacity",E,R[14],2,[[["self"]],["bool"]]]],"p":[[3,R[15]],[3,R[16]],[3,"Error"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);